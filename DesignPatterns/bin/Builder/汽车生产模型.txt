建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。
        建造者模式的使用场景：
	（1）当产品有复杂的内部构造时（参数很多）。
	（2）需要生产的产品的属性相互依赖，这些属性的赋值顺序比较重要时（因为在调用ConcreteBuilder的赋值方法时是有先后顺序的）。
         建造者模式包括的角色：
	（1）Builder：给出一个抽象接口或抽象类，以规范产品的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建，一般由子类具体实现。
	（2）ConcreteBuilder：Builder接口的实现类，并返回组建好对象实例。
	（3）Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。
	（4）Product：要创建的复杂对象，产品类。
	
	汽车模型       (规范生产组件 接口)
	汽车生产流程规范  (生产汽车模型,规范生产流程)
	生产商            (提供厂商的生产线进行生产)
	汽车(型号A)(汽车模型的具体实现)
	汽车(型号B)(汽车模型的具体实现)
	购买者(客户测试端) (通过询问生产商,购买制定型号的汽车)
	